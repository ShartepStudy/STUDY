#include <windows.h>
#include <tchar.h>

#include "bass.h"
#pragma comment (lib, "bass.lib")

// прототип оконной процедуры, которая занимается обработкой сообщений
LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);

// название класса окна
TCHAR szClassWindow[] = TEXT("Воспроизведение MP3");

////////////////////// дескриптор потока
HSTREAM stream;
////////////////////////////////////////

INT WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR lpszCmdLine, int nCmdShow)
{
	WNDCLASSEX wcl;

	wcl.cbSize = sizeof(wcl);	// размер структуры WNDCLASSEX
	wcl.style = CS_HREDRAW | CS_VREDRAW;	// CS (Class Style) - стиль класса окна
	wcl.lpfnWndProc = WindowProc;	// адрес оконной процедуры
	wcl.cbClsExtra = 0;		// используется Windows 
	wcl.cbWndExtra  = 0; 	// используется Windows 
	wcl.hInstance = hInst;	// дескриптор данного приложения
	wcl.hIcon = LoadIcon(NULL, IDI_APPLICATION);	// загрузка стандартной иконки
	wcl.hCursor = LoadCursor(NULL, IDC_ARROW);	// загрузка стандартного курсора	
	wcl.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH);	// заполнение окна белым цветом
	wcl.lpszMenuName = NULL;	// приложение не содержит меню
	wcl.lpszClassName = szClassWindow;	// имя класса окна
	wcl.hIconSm = NULL;	// отсутствие маленькой иконки для связи с классом окна

	if (!RegisterClassEx(&wcl))
		return 0; // при неудачной регистрации - выход

	HWND hWnd = CreateWindowEx(
		0,		// расширенный стиль окна
		szClassWindow,	//имя класса окна
		szClassWindow, // заголовок окна
		WS_OVERLAPPEDWINDOW,				// стиль окна
		// заголовок, рамка, позволяющая менять размеры, системное меню, кнопки развёртывания и свёртывания окна
		40,	// х-координата левого верхнего угла окна
		40,	// y-координата левого верхнего угла окна
		400,	// ширина окна
		200,	// высота окна
		NULL,			// дескриптор родительского окна
		NULL,			// дескриптор меню окна
		hInst,		// идентификатор приложения, создавшего окно
		NULL);		// указатель на область данных приложения

	// 4. отображение окна
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd); // перерисовка окна

	/////////////////////////////////////////////////////////

	if (HIWORD(BASS_GetVersion())!=BASSVERSION) {
		MessageBox (NULL, "Ошибка версии BASS.", NULL, 0);
		return 1;
	}
	if (!BASS_Init (-1, 22050, BASS_DEVICE_3D , 0, NULL)) {
		MessageBox (NULL, "Не удалось инициализировать BASS.", NULL, 0);
		return 1;
	}

	/////////////////////////////////////////////////////////

	char filename[] = "1.mp3";
	/* создаем потоковый звук, связанный с файлом */
	stream = BASS_StreamCreateFile(FALSE, filename, 0, 0, 0); 
	if (!stream) {
		/* ...обработка ошибки... */
		return 1;
	}

	/* воспроизводим звук */
	BASS_ChannelPlay(stream,TRUE);

	/////////////////////////////////////////////////////////

	// 5. запуск цикла обработки сообщений
	MSG lpMsg;
	while(GetMessage(&lpMsg, NULL, 0, 0)) // получение очередного сообщения из очереди сообщений
	{
		TranslateMessage(&lpMsg);	// трансляция сообщения
		DispatchMessage(&lpMsg);	// диспетчеризация сообщений
	}
	return lpMsg.wParam;
}	

LRESULT CALLBACK WindowProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam)
{
	switch(uMessage)
	{
	case WM_DESTROY: // сообщение о завершении программы
		PostQuitMessage(0);
		break;
		/////////////////////////////////
	case WM_KEYDOWN:
		BASS_ChannelStop(stream);
		BASS_StreamFree(stream); 
		BASS_Free();
		break;
		/////////////////////////////////
	default:
		// все сообщения, которые не обрабатываются в данной оконной функции 
		// направляются обратно Windows на обработку по умолчанию
		return DefWindowProc(hWnd, uMessage, wParam, lParam);
	}
	return 0;
}