
Таймер синхронизации или ожидаемый таймер (waitable timer) - это объект ядра, который самостоятельно переходит в свободное состояние в определенное время или через регулярные промежутки времени.
 
Ожидаемый таймер аналогично событию бывают двух типов:
•	со сбросом вручную;
•	с автоматическим сбросом. 

Таймер с ручным сбросом позволяют возобновить выполнение сразу нескольких ждущих потоков,
в то время как таймер с автоматическим сбросом  возобновляют выполнение только одного потока. 

Для создания таймера синхронизации необходимо вызвать функцию API CreateWaitableTimer. 

HANDLE CreateWaitableTimer(
  	LPSECURITY_ATTRIBUTES psa, // атрибуты доступа
  	BOOL bManualReset, // тип сброса
	  LPCTSTR pszName // имя объекта 
);

Параметр bManualReset определяет тип таймера синхронизации. Значение TRUE  создает таймер со сбросом вручную, а значение FALSE — таймер с автоматическим сбросом. Параметр pszName содержит указатель на строку, в которой содержится имя объекта синхронизации. Если pszName имеет значение NULL, то создается неименованный объект.

Получить дескриптор существующего таймера синхронизации можно вызовом функции  API OpenWaitableTimer, указав в параметре pszName имя существующего объекта.

HANDLE OpenWaitableTimer( 
   DWORD dwDesiredAccess, // права доступа (TIMER_ALL_ACCESS – полный доступ)
   BOOL blnheritHandle, // параметр определяет, будет ли  наследоваться дескриптор таймера (если TRUE – дескриптор наследуемый)
   LPCTSTR pszName // имя объекта 
);

Объект «ожидаемый таймер» всегда создаются в занятом состоянии. Чтобы сообщить таймеру, в какой момент он должен перейти в свободное состояние, необходимо вызвать функцию API SetWaitableTimer.

BOOL SetWaitableTimer(
    HANDLE hTimer, // дескриптор таймера
    const LARGE_INTEGER pDueTime, // время первого срабатывания таймера
    LONG lPeriod, // период таймера в миллисекундах
    PTIMERAPCROUTINE pfnCompletionRoutine,// адрес асинхронно вызываемой APC-процедуры (asynchronous procedure call),
которая вызывается в момент // перехода таймера в сигнальное состояние

    LPVOID lpArgToCompletionRoutine,// указатель на структуру, передаваемую в APC-процедуру
    BOOL fResume // если данный параметр равен TRUE, при срабатывании таймера компьютер выйдет из режима сна (если он
находился в спящем режиме), и возобновятся потоки, ожидавшие этот таймер.
);

Параметры pDueTime и lPeriod используются совместно: первый из них задает, когда таймер должен сработать в первый раз,
второй определяет, насколько часто это должно происходить в дальнейшем. 

Следует отметить, что чаще всего необходимо, чтобы таймер сработал только один раз - через определенное время перешел в свободное состояние и уже больше никогда не срабатывал. Для этого достаточно передать 0 в параметре lPeriod. Затем можно вызвать CloseHandle, чтобы закрыть таймер, либо перенастроить таймер повторным вызовом SetWaitableTimer с другими параметрами.

Для отмены ожидаемого таймера применяется функция API CancelWaitableTimer. 

BOOL CancelWaitableTimer(
	HANDLE hTimer // дескриптор таймера синхронизации
 );

.............................

NOTIFYICONDATA, объекты которой используются для создания иконок в области уведомлений, а также для получения поступающих оттуда сообщений.


typedef struct _NOTIFYICONDATA{
   DWORD cbSize; // размер структуры в байтах
   HWND hWnd; // дескриптор окна, которое будет получать уведомляющие 
   // сообщения, ассоциированные с иконкой в области уведомления
   UINT uID; // определенный приложением идентификатор иконки
   UINT uFlags; // массив флагов, которые указывают, какие из членов 
   // структуры  задействованы, т.е. содержат корректные значения
   UINT uCallbackMessage; //определенный приложением идентификатор сообщения.
   // Система использует этот идентификатор для посылки уведомляющих
   // сообщений окну, дескриптор которого хранится в поле hWnd. Эти сообщения
   // посылаются, когда происходит "мышиное" сообщение в прямоугольнике, где
   // расположена иконка, или иконка выбирается или активизируется с помощью
   // клавиатуры. Параметр сообщения wParam содержит при этом идентификатор
   // иконки в трэе, где произошло событие, а параметр сообщения lParam - 
   // "мышиное" или клавиатурное сообщение, ассоциированное с событием.
   // Пример события: щелчок мышки по иконке в области уведомления.
   HICON hIcon; // дескриптор иконки 
   TCHAR szTip[64]; // указатель на завершающуюся нулем строку с текстом 
   // стандартной подсказки. Максимальный размер подсказки 64 символа
} NOTIFYICONDATA, *PNOTIFYICONDATA;

	Для добавления, удаления и изменения иконки в области уведомлений служит функция API Shell_NotifyIcon.


BOOL Shell_NotifyIcon(
   DWORD dwMessage, // выполняемое действие 
      //(NIM_ADD – добавить иконку, NIM_DELETE – удалить иконку, NIM_MODIFY – 	// модифицировать  иконку)
   PNOTIFYICONDATA lpdata // указатель на структуру NOTIFYICONDATA
 );
