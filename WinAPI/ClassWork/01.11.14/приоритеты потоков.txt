создаваемый поток получает базовый приоритет в соответствии с классом своего процесса.
После создания потока его относительный приоритет может  изменяться как операционной системой,
так и приложением с помощью функции API SetThreadPriority. 

BOOL SetThreadPriority(
         HANDLE hThread,// дескриптор потока
         int nPriority // относительный приоритет потока
 );

Второй параметр может принимать следующие значения:

Относительный
приоритет потока			Значение параметра		Описание

Idle (простаивающий)			THREAD_PRIORITY_IDLE		Приоритет потока равен 1 для классов Idle, Normal и High и 16 для процессов Realtime
Lowest (самый низкий)			THREAD_PRIORITY_LOWEST		Приоритет потока на 2 меньше базового уровня приоритета класса процесса
Below normal(ниже нормального)		THREAD_PRIORITY_BELOW_NORMAL	Приоритет потока на 1 меньше базового уровня приоритета класса процесса
Normal (нормальный)			THREAD_PRIORITY_NORMAL		Приоритет потока равен ба-зовому уровню приоритета класса процесса
Above normal(выше нормального)		THREAD_PRIORITY_ABOVE_NORMAL	Приоритет потока на 1 больше базового уровня приоритета класса процесса
Highest (наивысший)			THREAD_PRIORITY_HIGHEST		Приоритет потока на 2 больше базового уровня приоритета класса процесса
Time critical (критичный по времени)	THREAD_PRIORITY_TIME_CRITICAL	Приоритет потока равен 15 для классов Idle, Normal и High и 31 для процессов Realtime

/////////////////////////////

Для получения относительного приоритета потока используется функция API GetThreadPriority.

int GetThreadPriority(
        HANDLE hThread // дескриптор потока
);

/////////////////////////////

Для получения дескриптора текущего процесса используется функция API GetCurrentProcess.

HANDLE GetCurrentProcess(void);

/////////////////////////////

Для получения дескриптора текущего потока используется функ-ция API GetCurrentThread.

HANDLE GetCurrentThread(void);

/////////////////////////////

Для получения идентификатора текущего процесса используется функция API GetCurrentProcessId.

DWORD GetCurrentProcessId(void);

/////////////////////////////

Для получения идентификатора текущего потока используется функция API GetCurrentThreadId.

DWORD GetCurrentThreadId(void);

