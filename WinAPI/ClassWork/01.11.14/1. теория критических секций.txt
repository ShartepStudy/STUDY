критическая секция (critical section) — это небольшой участок кода, требующий монопольного доступа к каким-то общим данным. она позволяет сделать так, чтобы единовременно только один поток получал доступ к определенному ресурсу. если в определенный момент времени несколько потоков попытаются получить доступ к критической секции, то  контроль над ней будет предоставлен только одному из потоков, а все остальные будут переведены в состояние ожидания до тех пор, пока участок не освободится. 

для использования критической секции необходимо определить переменную типа CRITICAL_SECTION. поскольку эта переменная должна находиться в области видимости для  каждого использующего ее потока, обычно ее объявляют глобальной. кроме того, эту  переменную следует инициализировать до ее первого применения с помощью  функции API InitializeCriticalSection:

void InitializeCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection // указатель на объект критической секции
);

Чтобы завладеть критической секцией, поток должен вызвать функцию EnterCriticalSection.

void EnterCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection // указатель на объект критической секции
);

если критическая секция не используется в данный момент другим потоком, то текущий поток захватывает её 
и выполняет инструкции этой секции, которые следуют сразу после вызова функции EnterCriticalSection. при этом критическая секция обозначается системой как занятая. 

если критическая секция в данный момент уже используется другим потоком, то текущий поток блокируется до тех пор, пока секция не будет освобождена функцией LeaveCriticalSection.

void LeaveCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection // указатель на объект критической секции
);

вызов функции LeaveCriticalSection определяет конец критической секции. при этом критическая секция обозначается системой как доступная. как только поток получает контроль над критической секцией, доступ  других потоков к этой секции блокируется. при этом очень важно, чтобы время выполнения критической секции было минимальным. это позволит добиться наилучших результатов работы приложения.

если критическая секция больше не нужна, то используемые ей ресурсы  необходимо освободить вызовом функции DeleteCriticalSection.

void DeleteCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection // указатель на объект критической секции
);

кроме перечисленных выше функций WinAPI предоставляет функцию TryEnterCriticalSection, которая позволяет осуществить попытку захватить критическую секцию.

void TryEnterCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection // указатель на объект критической секции
);

Например:

CRITICAL_SECTION cs;
	...
BOOL bTry = TryEnterCriticalSection(&cs); 
if(bTry)
{
	// выполнение кода критической секции (начался монопольный доступ к ресурсу)
} 
else 
{
	// контроль над критической секцией недоступен 
}

если критическая секция доступна, то поток входит в эту секцию и выполняет ее код, получая монопольной доступ к какому-то ресурсу. если секция недоступна, то поток не блокируется, как в случае применения функции EnterCriticalSection, а занимается другой работой, за что отвечает ветка else. 
