все потоки в системе должны иметь доступ к различным системным ресурсам — файлам, окнам и т.д.
если один из потоков запросит монопольный доступ к какому-либо ресурсу, другим потокам, которым тоже нужен этот ресурс,
не удастся выполнить свои задачи. с другой стороны, просто недопустимо, чтобы потоки бесконтрольно пользовались ресурсами.
например, если один поток записывает информацию в файл, все другие потоки не должны в этот момент времени использовать данный файл.

таким образом, возникает необходимость синхронизировать работу потоков, желающих получить доступ  к одному и тому же ресурсу. 

другой причиной может быть ожидание одним потоком некоторого события, которое может наступить лишь при выполнении другого потока. для таких случаев должны быть предусмотрены специальные средства, с помощью которых первый поток будет переведен в состояние ожидания до возникновения соответствующего события, а после этого продолжит выполнение.

два основных случая, когда потоки должны взаимодействовать друг с другом: 
•	совместное использование разделяемого ресурса (чтобы не разрушить его); 
•	необходимость уведомления других потоков о завершении каких-либо операций. 

...........................

синхронизацию потоков обычно осуществляют с использованием примитивов синхронизации, таких как:
•	атомарные операции;
•	критические секции; 
•	события; 
•	ожидаемые таймеры; 
•	семафоры; 
•	мьютексы.

////////////////////////////////////////////////////////////////////////////

атомарный доступ (atomic access) — это монопольный захват ресурса.

...........................

LONG g = 0; // определяем глобальную переменную
	
DWORD WINAPI Thread1( LPVOID lp )
{
	++g;
	return 0;
}

DWORD WINAPI Thread2( LPVOID lp )
{
	++g;
	return 0;
}

...........................

кажется, что если запустить 2 потока одновременно, то переменная g будет в итоге равна 2.
но, это не всегда так.