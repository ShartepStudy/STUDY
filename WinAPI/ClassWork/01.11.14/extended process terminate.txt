#include <windows.h>
#include "resource.h"
#include <tlhelp32.h>
#include <windows.h>

#include <crtdbg.h> // _ASSERTE


BOOL CALLBACK DlgProc(HWND, UINT, WPARAM, LPARAM);

HANDLE hProcessSnap;
HANDLE hProcess;
PROCESSENTRY32 pe32;

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR lpszCmdLine, int nCmdShow)
{
	// главное окно приложения на основе модального диалога
	return DialogBox(hInstance, MAKEINTRESOURCE(IDD_DIALOG1), NULL, DlgProc); 
}

BOOL KillTask(wchar_t* ExeFileName)
{
	bool Co;
	HANDLE FS;
	HANDLE hProcess = NULL;
	DWORD dwError;
	int result;
	FS = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0);
	pe32.dwSize = sizeof(pe32);
	Co = Process32First(FS, &pe32);

	while (Co)
	{
	
		if ( lstrcmp(pe32.szExeFile, ExeFileName)==0 ) 
		{
			hProcess = OpenProcess(PROCESS_TERMINATE, false, pe32.th32ProcessID);
			
			if (hProcess == NULL)
			{
				if (GetLastError() != ERROR_ACCESS_DENIED)
					return FALSE;

				OSVERSIONINFO osvi;

				// определяем версию операционной системы
				osvi.dwOSVersionInfoSize = sizeof(osvi);
				GetVersionEx(&osvi);

				// мы больше ничего не можем сделать, если это не Windows NT
				if (osvi.dwPlatformId != VER_PLATFORM_WIN32_NT)
					return SetLastError(ERROR_ACCESS_DENIED), FALSE;

				// включим привилегию SE_DEBUG_NAME и попробуем еще раз

				TOKEN_PRIVILEGES Priv, PrivOld;
				DWORD cbPriv = sizeof(PrivOld);
				HANDLE hToken;

				// получаем токен текущего потока 
				if (!OpenThreadToken(GetCurrentThread(), 
									 TOKEN_QUERY|TOKEN_ADJUST_PRIVILEGES,
									 FALSE, &hToken))
				{
					if (GetLastError() != ERROR_NO_TOKEN)
						return FALSE;

					// используем токен процесса, если потоку не назначено
				// никакого токена
					if (!OpenProcessToken(GetCurrentProcess(),
										  TOKEN_QUERY|TOKEN_ADJUST_PRIVILEGES,
										  &hToken))
						return FALSE;
				}

				_ASSERTE(ANYSIZE_ARRAY > 0);

				Priv.PrivilegeCount = 1;
				Priv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
				LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Priv.Privileges[0].Luid);

				// попробуем включить привилегию
				if (!AdjustTokenPrivileges(hToken, FALSE, &Priv, sizeof(Priv),
										   &PrivOld, &cbPriv))
				{
					dwError = GetLastError();
					CloseHandle(hToken);
					return SetLastError(dwError), FALSE;
				}

				if (GetLastError() == ERROR_NOT_ALL_ASSIGNED)
				{
					// привилегия SE_DEBUG_NAME отсутствует в токене
					// вызывающего
					CloseHandle(hToken);
					return SetLastError(ERROR_ACCESS_DENIED), FALSE;
				}

				// попробуем открыть описатель процесса еще раз
				hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pe32.th32ProcessID);
				dwError = GetLastError();
		        
				// восстанавливаем исходное состояние привилегии
				AdjustTokenPrivileges(hToken, FALSE, &PrivOld, sizeof(PrivOld),
									  NULL, NULL);
				CloseHandle(hToken);

				if (hProcess == NULL)
					return SetLastError(FALSE), NULL;
			}
			// пытаемся завершить процесс
			if (!TerminateProcess(hProcess, (UINT)-1))
			{
				dwError = GetLastError();
				CloseHandle(hProcess);
				return SetLastError(dwError), FALSE;
			}
		}
		Co = Process32Next(FS, &pe32);
	}

	CloseHandle(FS);
	CloseHandle(hProcess);

	return TRUE;
}


BOOL CALLBACK DlgProc(HWND hWnd, UINT message, WPARAM wp, LPARAM lp)
{
	switch(message)
	{
	case WM_CLOSE: 
		EndDialog(hWnd, 0);
		return 1;

	case WM_INITDIALOG:

		KillTask(L"calc.exe");



		hProcessSnap = CreateToolhelp32Snapshot( TH32CS_SNAPPROCESS, 0 );
		if( hProcessSnap == INVALID_HANDLE_VALUE )
		{
			MessageBox(0,TEXT("1"),TEXT("INVALID_HANDLE_VALUE"),0);
			return 0;
		}

		// Set the size of the structure before using it.
		pe32.dwSize = sizeof( PROCESSENTRY32 );

		// Retrieve information about the first process,
		// and exit if unsuccessful
		if( !Process32First( hProcessSnap, &pe32 ) )
		{
			MessageBox(0,TEXT("2"),TEXT("Process32First"),0); // show cause of failure

			CloseHandle( hProcessSnap );          // clean the snapshot object
			return 0;
		}

		// Now walk the snapshot of processes, and
		// display information about each process in turn
		do
		{
			wchar_t*str=new wchar_t[200];
			wsprintf(str,L"%d",pe32.th32ProcessID);
		//	MessageBox(0,pe32.szExeFile,str,0); // show process name and id

		} while( Process32Next( hProcessSnap, &pe32 ) );

		return 1;
	}
	return 0;
}