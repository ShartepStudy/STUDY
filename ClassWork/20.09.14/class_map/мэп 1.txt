# include <map>
# include <algorithm>
# include <vector>
# include <iostream>
# include <string>
using namespace std;

// Объявляются два отображения
typedef map<string, int> friendMap; 
typedef map<int, string> sortedMap;

typedef friendMap::value_type entry_type;
typedef sortedMap::value_type sorted_entry_type;

// Вывести в поток запись
void printEntry(const entry_type & entry)
{ cout << entry.first << ":" << entry.second << endl; }

void printSortedEntry(const sorted_entry_type & entry)
{ cout << entry.first << ":" << entry.second << endl; }

// Взять первые цифры телефона
int prefix(const entry_type& entry)
{ return entry.second / 10000; }

// Сравнить первые цифры двух телефонов
bool prefixCompare(const entry_type & a, const entry_type & b)
{ return prefix(a) < prefix(b); }

// Функциональный объект, сравнивающий первые цифры телефонов
class checkPrefix {
public:
	int testPrefix;
	checkPrefix (int p) : testPrefix(p) { }
	bool operator () (const entry_type & entry)
	{
		return prefix(entry) == testPrefix; 
	}
};

// Собственно справочник
class telephoneDirectory {
public:
	// Добавить запись
	void addEntry (string name, int number)
	{
		database[name] = number; 
	}
	// Удалить запись
	void remove (string name)
	{
		database.erase(name); 
	}
	// Обновить запись
	void update (string name, int number)
	{ 
		remove(name);
		addEntry(name, number);
	}
	// Показать на экране все записи
	void displayDatabase()
	{
		for_each(database.begin(), database.end(), printEntry);
	}

	void displayPrefix(int);

	void displayByPrefix(); 
private:
	friendMap database;
};
// Вывести все записи для заданных первых 
// цифр телефона
void telephoneDirectory::displayPrefix(int prefix)
{
	cout << "Listing for prefix " << prefix << endl;
	// Создаем итератор, ссылающийся на 
	// контейнер с записями
	friendMap::iterator where;
	// Искать с начала до конца все вхождения для заданных
	// первых цифр телефона
	where = find_if(database.begin(), database.end(), checkPrefix(prefix));
	while (where != database.end()) {
		printEntry(*where);
		where = find_if(++where, database.end(), checkPrefix(prefix));
	}
	cout << "end of prefix listing" << endl;
}
// Печатать в порядке телефонных номеров
void telephoneDirectory::displayByPrefix()
{
	cout << "Display by prefix" << endl;
	// Еще один контейнер map для хранения 
	// отсортированных записей
	sortedMap sortedData;
	// Заполнить контейнер, сортируя данные 
	for (friendMap::iterator i = database.begin(); i != database.end(); i++)
		sortedData.insert(sortedMap::value_type((*i).second,
		(*i).first));
	// Поочередно вывести отсортированные записи
	for_each(sortedData.begin(), sortedData.end(), printSortedEntry);
	cout << "end display by prefix" << endl;
}
// Точка входа в программу
void main() {
	cout << "Telephone Directory sample program" << endl;
	telephoneDirectory friends;
	// Добавление записей в справочник
	friends.addEntry("Samantha", 6342343);
	friends.addEntry("Brenda", 5436546);
	friends.addEntry("Fred", 7435423);
	friends.addEntry("Allen", 6348723);
	// Вывести данные по порядку
	friends.displayDatabase();
	// Вывести телефоны, начинающиеся
	// с цифры 634
	friends.displayPrefix(634);
	// Вывести данные, отсортировав их по номерам
	friends.displayByPrefix();
	cout << "End of telephone directory sample program" << endl;
}